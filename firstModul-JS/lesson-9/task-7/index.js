/* 
* Задание

 * У вас есть массив goals, в котором каждый индекс означает сыгранный матч,
 * а число под индексом - количество голов забитых в конкретном матче.
 * const goals = [8, 1, 1, 3, 2, -1, 5];
 * То есть в 1-м матче команда забила 8 мячей, во 2-м - один и т.д. Если в массиве есть
 * отрицательное число, то значит, что команде было засчитано автоматическое поражение.

 * Используя данный массив goals вам необходимо вывести следующую статистику за весь сезон.
 * 1. Самый результативный матч по количеству голов. Выведите в модальном окне
 * через alert сообщение “Самый результативный матч был под номером number. В
 * нем было забито numberOfGoals гол(ов).” (замените number на порядковый номер
 * матча, а numberOfGoals - на количество голов в самом результативном матче).
 * Если самых результативных матчей несколько, то выведите первый из них.
 * 2. Самые нерезультативные игры. В массиве нужно найти все самые
 * нерезультативные игры (все матчи, у которых количество голов между собой
 * совпадает и является минимальным). В данном массиве goals это будут 2 матча
 * под номерами 2 и 3 с количеством голов по 1. Выведите через alert сообщение
 * “Самые нерезультативные матчи были под номерами numbers. В каждом из них
 * было забито по numberOfGoals мячу(а).” (замените numbers на порядковые номера
 * матчей и отобразите их через запятую, а numberOfGoals - на количество голов в
 * самом нерезультативном матче). Не берите в учет игры с автоматическим поражением.
 * 3. Общее количество голов за сезон. Не берите в учет игры с автоматическим
 * поражением. Выведите сообщение через alert “Общее количество голов за сезон
 * равно numberOfGoals” (замените numberOfGoals на число общее количества голов за сезон).
 * 4. Были ли автоматические поражения. Если были, то выведите сообщение через
 * alert “Были автоматические поражения: да”, иначе “Были автоматические поражения: нет”.
 * 5. Среднее количество голов за матч. Выведите сообщение через alert “Среднее
 * количество голов за матч равно numberOfGoals” (замените numberOfGoals на среднее количество голов за матч).
 * 6. Отсортируйте голы в порядке возрастания и выведите все результаты через запятую в модальном окне alert.
 * Массив goals не должен быть изменен.
*/

const goals = [8, 1, 1, 3, 2, -1, 5];
let minNumberOfGoals = goals[0];
let maxNumberOfGoals = goals[0];
let maxNumberOfGoalsIndex = 0;

// 1 Вариант 1
// const maxGoals = Math.max(...goals);
// const maxGoalsIndex = goals.findIndex(() => maxGoals);
// alert(
//   `Самый результативный матч был под номером ${
//     maxGoalsIndex + 1
//   }. В нем было забито ${maxGoals} гол(ов).`
// );

// 1 Вариант 2
goals.forEach((goalNumber, index) => {
  if (goalNumber > maxNumberOfGoals) {
    maxNumberOfGoals = goalNumber;
    maxNumberOfGoalsIndex = index;
  }
});
alert(
  `Самый результативный матч был под номером ${
    maxNumberOfGoalsIndex + 1
  }. В нем было забито ${maxNumberOfGoals} гол(ов).`
);

// 2
goals.forEach((goal) => {
  if (goal < minNumberOfGoals && goal >= 0) {
    minNumberOfGoals = goal;
  }
});

const matchesWithMinNumberOfGoals = goals
  .map((goal, index) => (goal === 1 ? index + 1 : -1))
  .filter((goal) => goal > 0);
alert(
  `Самые нерезультативные матчи были под номерами ${matchesWithMinNumberOfGoals}. В каждом из них было забито по ${minNumberOfGoals} мячу(а).`
);

// 3
const goalsSum = goals.reduce((acc, goal) => {
  if (goal !== -1) {
    sum = acc + goal;
  }

  return sum;
});

alert(`Общее количество голов за сезон равно ${goalsSum}`);

// 4
const isAutomaticDefeats = goals.some((goals) => goals === -1);
if (isAutomaticDefeats) {
  alert(`Были автоматические поражения: да`);
} else {
  alert(`Были автоматические поражения: нет`);
}

// 5
const goalsAverageQuantity = goalsSum / goals.length;

alert(
  `Среднее количество голов за матч равно ${Math.floor(goalsAverageQuantity)}`
);

// 6
const sortGoals = [...goals].sort((a, b) => a - b);
alert(sortGoals.join(', '));
